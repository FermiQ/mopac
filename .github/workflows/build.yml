name: Build multi-platform executables

on:
  push:
    branches:    
      - master

env:
  IFORT_LINUX_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18210/l_fortran-compiler_p_2021.4.0.3224.sh
  IFORT_MAC_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18357/m_fortran-compiler-classic_p_2022.0.0.63.dmg
  IFORT_WINDOWS_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18412/w_fortran-compiler_p_2022.0.0.77.exe

jobs:
  linux-build:
    runs-on: ubuntu-latest

    steps:
      - name: Download & install Intel Fortran compiler
        run: |
          curl $IFORT_LINUX_URL --output ifort_download.sh
          sudo sh ifort_download.sh -a --silent --eula accept

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Clone glibc compatibility library
        uses: actions/checkout@v2
        with:
          repository: wheybags/glibc_version_header
          path: glibc

      - name: Install dependencies with PyPI
        run: python -m pip install numpy

      - name: Install dependencies with Anaconda
        run: conda install -c intel mkl-static

      - name: Configure & build mopac_math with CMake & GNU compilers
        run: |
          cmake -S math -B build_math \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_C_FLAGS="-include $GITHUB_WORKSPACE/glibc/version_headers/x64/force_link_glibc_2.17.h" \
            -DCMAKE_LIBRARY_PATH="$CONDA/lib"
          cmake --build build_math --config Release

      - name: Configure & build mopac_core with CMake & GNU compilers
        run: |
          cmake -B build \
            -DCMAKE_Fortran_COMPILER=gfortran \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_C_FLAGS="-include $GITHUB_WORKSPACE/glibc/version_headers/x64/force_link_glibc_2.17.h" \
            -DCMAKE_LIBRARY_PATH="$GITHUB_WORKSPACE/build_math"
          cmake --build build --config Release
          cd build
          ctest --verbose

      - name: Zip executable & shared libraries (including system libraries)
        env:
          GCC_LIB: /usr/lib/gcc/x86_64-linux-gnu/9
        run: |
          zip -j mopac.zip build/mopac
          zip -j mopac.zip build/param
          zip -j mopac.zip build/libmopac_core.so*
          zip -j mopac.zip build_math/libmopac_math.so*
          zip -j mopac.zip $CONDA/lib/libiomp5.so*
          zip -j mopac.zip $GCC_LIB/libgfortran.so*
          zip -j mopac.zip $GCC_LIB/libgcc_s.so*
          zip -j mopac.zip $GCC_LIB/libquadmath.so*

      - name: Save executable as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: mopac.zip

  mac-build:
    runs-on: macos-latest

    steps:
      - name: Download & install Intel Fortran compiler
        run: |
          curl $IFORT_MAC_URL --output ifort_download.dmg
          hdiutil attach ifort_download.dmg
          sudo /Volumes/m_fortran-compiler*/bootstrapper.app/Contents/MacOS/install.sh --silent --eula accept

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies with PyPI
        run: python -m pip install numpy

      - name: Install dependencies with Anaconda
        run: |
          sudo chown -R runner:staff $CONDA
          conda install -c intel mkl-static

      - name: Configure & build mopac_math with CMake & GNU compilers
        run: |
          cmake -S math -B build_math \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.8 \
            -DCMAKE_C_COMPILER=gcc-11 \
            -DCMAKE_LIBRARY_PATH="$CONDA/lib"
          cmake --build build_math --config Release

      - name: Configure & build mopac_core with CMake & GNU compilers
        run: |
          cmake -B build \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.8 \
            -DCMAKE_Fortran_COMPILER=gfortran-11 \
            -DCMAKE_C_COMPILER=gcc-11 \
            -DCMAKE_LIBRARY_PATH="$GITHUB_WORKSPACE/build_math"
          cmake --build build --config Release
          cd build
          ctest --verbose

      - name: Zip executable & shared libraries (including system libraries)
        env:
          GCC_LIB: /usr/local/lib/gcc/11
        run: |
          zip -j mopac.zip build/mopac
          zip -j mopac.zip build/param
          zip -j mopac.zip build/libmopac_core*.dylib
          zip -j mopac.zip build_math/libmopac_math*.dylib
          zip -j mopac.zip $CONDA/lib/libiomp5.dylib
          zip -j mopac.zip $GCC_LIB/libgfortran*.dylib
          zip -j mopac.zip $GCC_LIB/libgcc_s*.dylib
          zip -j mopac.zip $GCC_LIB/libquadmath*.dylib

      - name: Save executable as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac
          path: mopac.zip

  windows-build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Download & install Intel Fortran compiler
        shell: cmd
        run: |
          curl ${{ env.IFORT_WINDOWS_URL }} --output ifort_download.exe
          ifort_download -s -x -f ifort_unpack
          dir ifort_unpack
          ifort_unpack\bootstrapper --silent --eula accept

      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            git
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-tools-git

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies with PyPI
        run: python -m pip install numpy

      - name: Install dependencies with Anaconda
        run: $CONDA/Scripts/conda install -c intel mkl-static

      - name: Create .lib file from .dll for Intel OpenMP
        env:
          MSVC_BIN: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64
        run: |
          mkdir local_omp
          cp $CONDA/Library/bin/libiomp5md.dll local_omp
          cd local_omp
          gendef libiomp5md.dll
          "$MSVC_BIN/lib" /def:libiomp5md.def /machine:x64

      - name: Configure & build mopac_math with CMake & Microsoft compiler
        env:
          MSVC_BIN: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64
        run: |
          cmake -S math -B build_math \
            -G "Visual Studio 16 2019" \
            -DCMAKE_LIBRARY_PATH="$CONDA/Library/lib;$GITHUB_WORKSPACE/local_omp"
          cmake --build build_math --config Release
          "$MSVC_BIN/dumpbin" /nologo /exports build_math/Release/build_math.dll > build_math/Release/exports.txt
          echo "EXPORTS" > build_math/Release/build_math.def
          tail -n +17 exports.txt | awk '{ $1=""; $2=""; $3=""; print $0 }' | sed -r 's/\s*(.*?)\s*$/\1/' | sed '/^$/d' >> build_math/Release/build_math.def
          cat build_math/Release/build_math.def

      - name: Configure & build mopac_core with CMake & GNU compilers
        run: |
          cd build_math/Release
          genlib mopac_math.def -a x86
          cd ../..
          cmake -B build \
            -G "MSYS Makefiles" \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_Fortran_COMPILER=gfortran \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_LIBRARY_PATH="$GITHUB_WORKSPACE/build_math/Release"
          cmake --build build --config Release

      - name: Zip executable & shared libraries (including system libraries)
        run: |
          zip -j mopac.zip build/mopac
          zip -j mopac.zip build/param
          zip -j mopac.zip build/mopac_core.dll
          zip -j mopac.zip build_math/Release/mopac_math.dll
          zip -j mopac.zip $CONDA/Library/bin/libiomp5md.dll

      - name: Save executable as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: mopac.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    needs:
      - linux-build
      - mac-build
      - windows-build

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Install GitHub Release
        run: |
          go get github.com/github-release/github-release
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Move/Create continuous tag
        run: |
          git tag --force continuous ${{ github.sha }}
          git push --tags --force

      - name: Assign GitHub user info for GitHub Release
        run: |
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})

          This is an automated build of the latest source in the master branch.
          It is not an official release, and it is not intended for production work.

          Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          github-release edit \
            --tag continuous \
            --name "Continuous Build" \
            --description "$DESCRIPTION" \
            --pre-release

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}

      - name: Add executables to the continuous release
        run: |
          github-release upload \
            --tag continuous \
            --replace \
            --name mopac-linux-continuous.zip \
            --file linux/mopac.zip
          github-release upload \
            --tag continuous \
            --replace \
            --name mopac-mac-continuous.zip \
            --file mac/mopac.zip
          github-release upload \
            --tag continuous \
            --replace \
            --name mopac-windows-continuous.zip \
            --file windows/mopac.zip
