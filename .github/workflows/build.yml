name: Build multi-platform executables

on:
  push:
    branches:    
      - master

env:
  IFORT_LINUX_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18436/l_fortran-compiler_p_2022.0.1.70.sh
  IFORT_MAC_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18357/m_fortran-compiler-classic_p_2022.0.0.63.dmg
  IFORT_WINDOWS_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18412/w_fortran-compiler_p_2022.0.0.77.exe

jobs:
#  linux-build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Download & install Intel Fortran compiler
#        run: |
#          curl $IFORT_LINUX_URL --output ifort_download.sh
#          sudo sh ifort_download.sh -a --silent --eula accept
#
#      - uses: actions/checkout@v2
#
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#
#      - name: Clone glibc compatibility library
#        uses: actions/checkout@v2
#        with:
#          repository: wheybags/glibc_version_header
#          path: glibc
#
#      - name: Install dependencies with PyPI
#        run: python -m pip install numpy
#
#      - name: Install dependencies with Anaconda
#        run: |
#          conda install -c intel mkl-static
#          echo "MKLROOT=$CONDA" >> $GITHUB_ENV
#
#      - name: Configure & build MOPAC with CMake
#        run: |
#          source /opt/intel/oneapi/setvars.sh
#          cmake -B build \
#            -DCMAKE_BUILD_TYPE=Release \
#            -DCMAKE_Fortran_COMPILER=ifort \
#            -DCMAKE_Fortran_FLAGS="-static-intel" \
#            -DCMAKE_C_COMPILER=gcc \
#            -DCMAKE_C_FLAGS="-include $GITHUB_WORKSPACE/glibc/version_headers/x64/force_link_glibc_2.17.h" \
#            -DBLA_STATIC=ON \
#            -DBLA_VENDOR=Intel10_64lp
#          cmake --build build
#
#      - name: Test MOPAC with CTest
#        run: |
#          cd build
#          ctest --verbose
#
#      - name: Zip executable & shared libraries (including system libraries)
#        run: |
#          zip -j mopac.zip build/mopac
#          zip -j mopac.zip build/param
#          zip -j mopac.zip build/libmopac_core.so*
#          zip -j mopac.zip $CONDA/lib/libiomp5.so*
#
#      - name: Save executable as an artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: linux
#          path: mopac.zip
#
#  mac-build:
#    runs-on: macos-latest
#
#    steps:
#      - name: Download & install Intel Fortran compiler
#        run: |
#          curl $IFORT_MAC_URL --output ifort_download.dmg
#          hdiutil attach ifort_download.dmg
#          sudo /Volumes/m_fortran-compiler*/bootstrapper.app/Contents/MacOS/install.sh --silent --eula accept
#
#      - uses: actions/checkout@v2
#
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#
#      - name: Install dependencies with PyPI
#        run: python -m pip install numpy
#
#      - name: Install dependencies with Anaconda
#        run: |
#          sudo chown -R runner:staff $CONDA
#          conda install -c intel mkl-static
#          echo "MKLROOT=$CONDA" >> $GITHUB_ENV
#
#      - name: Configure & build MOPAC with CMake
#        run: |
#          source /opt/intel/oneapi/setvars.sh
#          cmake -B build \
#            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.8 \
#            -DCMAKE_BUILD_TYPE=Release \
#            -DCMAKE_Fortran_COMPILER=ifort \
#            -DCMAKE_Fortran_FLAGS="-static-intel" \
#            -DCMAKE_C_COMPILER=gcc \
#            -DBLA_VENDOR=Intel10_64lp
#          cmake --build build
#
#      - name: Test MOPAC with CTest
#        run: |
#          cd build
#          ctest --verbose
#
#      - name: Zip executable & shared libraries (including system libraries)
#        run: |
#          zip -j mopac.zip build/mopac
#          zip -j mopac.zip build/param
#          zip -j mopac.zip build/libmopac_core*.dylib
#          zip -j mopac.zip $CONDA/lib/libiomp5.dylib
#
#      - name: Save executable as an artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: mac
#          path: mopac.zip

  windows-build:
    runs-on: windows-latest

    steps:
      - name: Download & install Intel Fortran compiler
        shell: cmd
        run: |
          curl ${{ env.IFORT_WINDOWS_URL }} --output ifort_download.exe
          ifort_download -s -x -f ifort_unpack
          ifort_unpack\bootstrapper --silent --eula accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies with PyPI
        run: python -m pip install numpy

      - name: Install dependencies with Anaconda
        shell: bash
        run: |
          $CONDA/Scripts/conda install -c intel mkl-static
          echo "MKLROOT=$CONDA/Library/lib" >> $GITHUB_ENV

      - name: Configure & build MOPAC with CMake
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          cmake -Bbuild ^
            -G"NMake Makefiles" ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_VERBOSE_MAKEFILE=ON ^
            -DCMAKE_Fortran_COMPILER="C:/Program Files (x86)/Intel/oneAPI/compiler/2022.0.0/windows/bin/intel64/ifort.exe" ^
            -DCMAKE_LIBRARY_PATH="%CONDA%/Library/lib;%CONDA%/Library/bin" ^
            -DBLA_STATIC=ON ^
            -DBLA_VENDOR=Intel10_64lp
          cmake --build build

      - name: Test MOPAC with CTest
        shell: bash
        run: |
          cd build
          ctest --verbose

      - name: Zip executable & shared libraries (including system libraries)
        shell: bash
        run: |
          zip -j mopac.zip build/mopac
          zip -j mopac.zip build/param
          zip -j mopac.zip build/mopac_core.dll
          zip -j mopac.zip $CONDA/Library/bin/libiomp5md.dll

      - name: Save executable as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: mopac.zip

#  continuous-deployment:
#    runs-on: ubuntu-latest
#    needs:
#      - linux-build
#      - mac-build
#      - windows-build
#
#    env:
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Install GitHub Release
#        run: |
#          go get github.com/github-release/github-release
#          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
#          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
#
#      - name: Move/Create continuous tag
#        run: |
#          git tag --force continuous ${{ github.sha }}
#          git push --tags --force
#
#      - name: Assign GitHub user info for GitHub Release
#        run: |
#          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
#          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV
#
#      - name: Setup continuous release
#        run: |
#          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
#
#          This is an automated build of the latest source in the master branch.
#          It is not an official release, and it is not intended for production work.
#
#          Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#          github-release edit \
#            --tag continuous \
#            --name "Continuous Build" \
#            --description "$DESCRIPTION" \
#            --pre-release
#
#      - name: Download all artifacts
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ github.workspace }}
#
#      - name: Add executables to the continuous release
#        run: |
#          github-release upload \
#            --tag continuous \
#            --replace \
#            --name mopac-linux-continuous.zip \
#            --file linux/mopac.zip
#          github-release upload \
#            --tag continuous \
#            --replace \
#            --name mopac-mac-continuous.zip \
#            --file mac/mopac.zip
#          github-release upload \
#            --tag continuous \
#            --replace \
#            --name mopac-windows-continuous.zip \
#            --file windows/mopac.zip
